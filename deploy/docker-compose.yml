version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://backend:3001
    depends_on:
      - backend
    networks:
      - app-network

  # Backend Service
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@db:5432/project_tracker
      - JWT_SECRET=${JWT_SECRET}
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    depends_on:
      - db
    networks:
      - app-network
    volumes:
      - ./src/backend/uploads:/app/uploads

  # Database Service
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_DB=project_tracker
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/backend/prisma/schema.prisma:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge